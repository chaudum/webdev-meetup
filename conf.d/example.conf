upstream crate {
    server 127.0.0.1:4200;
}

server {

    listen 8000;
    root /Users/christian/sandbox/nginx/data;
    autoindex on;

    gzip                         on;
    gzip_http_version            1.0;
    gzip_comp_level              2;
    proxy_pass_request_headers   on;
    underscores_in_headers       on;

    # -- simple ping
    location = /ping {
        if ($request_method != 'POST') {
            return 405;
        }
	access_log logs/pings.log ping_simple;
        return 201;
    }

    # -- advanced ping
    location ~ /ping/([^/]+)$ {
        if ($request_method != 'POST') {
            return 405;
        }

        if ($uri ~* "/ping/([^/]+)$") {
           set $id $1;
        }

        access_log logs/pings.log ping_adv;
        return 201;
    }

    # -- webhook example
    location = /webhook {
        if ($request_method != 'POST') {
            return 405;
        }

        set $json '{}';
        lua_need_request_body on;
        content_by_lua_file /Users/christian/sandbox/meetup/lua/simple.lua;
	access_log logs/github.log json;
        return 200;
    }

    location ~ /api/(.*)$ {
        internal;

        proxy_set_header User-Agent "crate";
        proxy_set_header Accept "*/json";
        proxy_set_header Accept-Encoding "deflate";

        rewrite ^/api/(.*)$ /users/$1 break;
        proxy_method POST;
        proxy_pass 'https://api.github.com';
        #access_log off;
    }

    location = /crate {
        internal;

        proxy_set_header User-Agent $http_user_agent;
        proxy_set_header Accept "*/json";
        proxy_set_header Accept-Encoding "deflate, identity";

        rewrite ^/crate$ /_sql break;

        proxy_method POST;
        proxy_pass 'http://crate';

        access_log off;
    }

    location = /github {
        if ($request_method != 'POST') {
            return 405;
        }
        lua_need_request_body on;
        content_by_lua_file /users/christian/sandbox/meetup/lua/github.lua;
	set $json '{}';
	access_log logs/github.log json;
    }

    location ~ /github/(identify|track)$ {
        internal;

        proxy_set_header User-Agent $http_user_agent;
        proxy_set_header Accept "*/json";
        proxy_set_header Accept-Encoding "deflate, identity";

        set $user 'username'; # production key
        set_by_lua $auth 'return "Basic " .. ngx.encode_base64(ngx.arg[1] .. ":")' $user;
        proxy_set_header Authorization $auth;

        rewrite ^/github/(identify|track)$ /v1/$1 break;
        proxy_method POST;
        proxy_pass 'https://api.segment.io';

        access_log off;
    }

    location = /github/api {
        internal;

        proxy_set_header User-Agent "crate";
        proxy_set_header Accept "*/json";
        proxy_set_header Accept-Encoding "deflate, identity";

        set_by_lua $api 'return ngx.unescape_uri(ngx.var.arg_uri)';

        proxy_method GET;
        proxy_pass $api;

        access_log off;
    }

}
